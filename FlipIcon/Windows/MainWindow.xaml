<Window x:Class="FlipIcon.Windows.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:acb="clr-namespace:AttachedCommandBehavior;assembly=AttachedCommandBehavior"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:h="clr-namespace:FlipIcon.Handler"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:s="clr-namespace:FlipIcon.Selectors"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:vm="clr-namespace:FlipIcon.ViewModels"
        xmlns:w="clr-namespace:FlipIcon.Windows"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/datagrid"
        xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
        x:Name="mainWindow"
        Title="MainWindow"
        Width="355"
        AllowsTransparency="True"
        Top="0"
        WindowStyle="None"
        d:DataContext="{d:DesignInstance IsDesignTimeCreatable=True,
                                         Type={x:Type vm:MainViewModel}}"
        mc:Ignorable="d">
    <Window.DataContext>
        <vm:MainViewModel x:Name="viewModel" />
    </Window.DataContext>
    <Window.Background>
        <SolidColorBrush Opacity="0.0" Color="Black" />
    </Window.Background>
    <Window.Resources>
        <Style x:Key="TranslucentScrollBarStyle" TargetType="{x:Type ScrollBar}">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Opacity" Value="0.9" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Opacity" Value="0.4" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ScrollViewer}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter Grid.RowSpan="2" Grid.ColumnSpan="2" />
                            <ScrollBar Name="PART_VerticalScrollBar"
                                       Grid.Column="1"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       Style="{StaticResource TranslucentScrollBarStyle}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                       Value="{TemplateBinding VerticalOffset}" />
                            <ScrollBar Name="PART_HorizontalScrollBar"
                                       Grid.Row="1"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       Orientation="Horizontal"
                                       Style="{StaticResource TranslucentScrollBarStyle}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                       Value="{TemplateBinding HorizontalOffset}" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- <CollectionViewSource Source="{Binding ElementName=mainWindow, Path=DataContext.ContextMenu.ChildMenuItems}" x:Key="ChildMenu"/> -->
        <CollectionViewSource x:Key="GridItems" Source="{Binding ElementName=mainWindow, Path=DataContext.Connections}" />
        <CollectionViewSource x:Key="GroupedChildMenu" Source="{Binding ElementName=mainWindow, Path=DataContext.GroupedMenuItems}" />
        <CollectionViewSource x:Key="UngroupedChildMenu" Source="{Binding ElementName=mainWindow, Path=DataContext.UngroupedMenuItems}" />

        <CompositeCollection x:Key="MenuCollection">
            <!--<MenuItem Header="Show Window" Command="{Binding ShowWindowCommand}" />
            <MenuItem Header="Hide Window" Command="{Binding HideWindowCommand}" />-->
            <CollectionContainer Collection="{Binding Source={StaticResource UngroupedChildMenu}}" />
            <Separator Visibility="{Binding DataContext.GroupingSeparatorVisibility, Source={x:Reference mainWindow}}" />
            <CollectionContainer Collection="{Binding Source={StaticResource GroupedChildMenu}}" />
            <Separator />
            <MenuItem x:Name="MenuItemVersion"
                      Command="{Binding DataContext.AboutMenuCommand,
                                        Source={x:Reference mainWindow}}"
                      Header="{Binding DataContext.VersionInfo,
                                       Source={x:Reference mainWindow}}" />
            <Separator Visibility="{Binding DataContext.ExtraMenuItemsVisibility, Source={x:Reference mainWindow}}" />
            <MenuItem x:Name="MenuItemStartup"
                      Command="{Binding DataContext.StartupCommand,
                                        Source={x:Reference mainWindow}}"
                      Header="Start with Windows"
                      IsChecked="{Binding DataContext.StartupEnabled,
                                          Source={x:Reference mainWindow}}"
                      Style="{x:Null}"
                      Tag="StartupCommand"
                      Visibility="{Binding DataContext.ExtraMenuItemsVisibility,
                                           Source={x:Reference mainWindow}}" />
            <MenuItem x:Name="MenuItemExit"
                      Command="{Binding DataContext.ExitApplicationCommand,
                                        Source={x:Reference mainWindow}}"
                      Header="Exit"
                      Style="{x:Null}"
                      Tag="ExitApplicationCommand"
                      Visibility="{Binding DataContext.ExtraMenuItemsVisibility,
                                           Source={x:Reference mainWindow}}" />
        </CompositeCollection>

        <DataTemplate x:Key="ConnectionDataTemplate">
            <Grid HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Grid.Background>
                    <SolidColorBrush Opacity="0.0" Color="Black" />
                </Grid.Background>

                <Border Grid.Column="0"
                        Margin="5"
                        BorderBrush="White"
                        BorderThickness="1">
                    <Label Width="50"
                           Height="50"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           HorizontalContentAlignment="Center"
                           VerticalContentAlignment="Center"
                           Content="{Binding Path=Abbreviation,
                                             FallbackValue=??}"
                           FontSize="16"
                           Foreground="White" />
                </Border>

                <Grid Grid.Column="1" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0"
                                Margin="5"
                                VerticalAlignment="Center">
                        <StackPanel Orientation="Horizontal" TextBlock.FontWeight="Normal">
                            <TextBlock FontSize="20"
                                       Foreground="White"
                                       Text="{Binding Path=FullName,
                                                      FallbackValue=FirstName}" />
                        </StackPanel>
                        <TextBlock FontSize="14"
                                   Foreground="LightGray"
                                   Text="{Binding Path=ConnectionStatus,
                                                  FallbackValue=Status}" />
                        <TextBlock FontSize="10"
                                   Foreground="White"
                                   Text="{Binding Path=PhoneNumber,
                                                  FallbackValue=Destination}" />
                    </StackPanel>
                    <StackPanel Grid.Column="1" VerticalAlignment="Center">
                        <TextBlock Grid.Column="1"
                                   VerticalAlignment="Center"
                                   DockPanel.Dock="Right"
                                   FontSize="14"
                                   Foreground="White"
                                   Text="{Binding Path=EntryType,
                                                  FallbackValue=EntryType}" />
                        <TextBlock VerticalAlignment="Center"
                                   FontSize="14"
                                   Foreground="White"
                                   Text="{Binding Path=VpnType}" />
                    </StackPanel>
                </Grid>
            </Grid>
        </DataTemplate>
        <!--  Background of selected item when focussed  -->
        <SolidColorBrush x:Key="{x:Static SystemColors.WindowTextColorKey}" Color="White" />
        <!--  Background of selected item when not focussed  -->
    </Window.Resources>

    <DockPanel LastChildFill="False">
        <Grid x:Name="LayoutRoot"
              Width="{Binding ElementName=mainWindow,
                              Path=Width}"
              Height="{Binding ElementName=mainWindow,
                               Path=Height}"
              DockPanel.Dock="Right">
            <Grid.Background>
                <SolidColorBrush Opacity="0.8" Color="Black" />
            </Grid.Background>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <ListView x:Name="connectionsListView"
                      Height="{Binding ElementName=mainWindow,
                                       Path=Height}"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      ItemTemplate="{StaticResource ConnectionDataTemplate}"
                      ItemsSource="{Binding Connections}"
                      ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                      ScrollViewer.VerticalScrollBarVisibility="Auto"
                      SelectedItem="{Binding SelectedConnection}">
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.Background>
                    <SolidColorBrush Opacity="0.0" Color="Black" />
                </ListView.Background>
                <acb:CommandBehaviorCollection.Behaviors>
                    <acb:BehaviorBinding Command="{Binding ConnectionCommand}"
                                         CommandParameter="{Binding ElementName=connectionsListView,
                                                                    Path=SelectedItem}"
                                         Event="MouseDoubleClick" />
                </acb:CommandBehaviorCollection.Behaviors>

                <ListView.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.HeaderTemplate>
                            <DataTemplate>
                                <StackPanel>
                                    <TextBlock Text="{Binding Path=Name}" />
                                </StackPanel>
                            </DataTemplate>
                        </GroupStyle.HeaderTemplate>
                        <GroupStyle.ContainerStyle>
                            <Style TargetType="{x:Type GroupItem}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type GroupItem}">
                                            <Expander>
                                                <Expander.Header>
                                                    <StackPanel Orientation="Horizontal">
                                                        <TextBlock Text="{Binding Path=Name}" />
                                                        <TextBlock Text="{Binding Path=ItemCount}" />
                                                        <TextBlock Text="Items" />
                                                    </StackPanel>
                                                </Expander.Header>
                                                <ItemsPresenter />
                                            </Expander>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </GroupStyle.ContainerStyle>
                    </GroupStyle>
                </ListView.GroupStyle>
            </ListView>

            <!--  The taskbar context menu - the first row is a dummy to show off simple data binding  -->
            <!--
                The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
                reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
            -->

            <!--  the application's NotifyIcon - started from App.xaml.cs. Declares its own view model.  -->
            <tb:TaskbarIcon x:Name="NotifyIcon"
                            IconSource="{Binding IconSource}"
                            LeftClickCommand="{Binding ShowAppBarCommand}"
                            MenuActivation="{Binding MenuActivationMode}"
                            NoLeftClickDelay="true"
                            Tag="{Binding ElementName=viewModel}"
                            ToolTipText="{Binding ConnectionStatus}"
                            h:BalloonHelper.CustomBalloon="{Binding Balloon}"
                            h:BalloonHelper.StandardBalloon="{Binding BalloonTip}">
                <acb:CommandBehaviorCollection.Behaviors>
                    <acb:BehaviorBinding Command="{Binding SetExtraMenuItemsVisiblityCommand}"
                                         CommandParameter="false"
                                         Event="TrayLeftMouseDown" />
                    <acb:BehaviorBinding Command="{Binding SetExtraMenuItemsVisiblityCommand}"
                                         CommandParameter="true"
                                         Event="TrayRightMouseDown" />
                </acb:CommandBehaviorCollection.Behaviors>
                <!--  self-assign a data context (could also be done programmatically)  -->
                <tb:TaskbarIcon.ContextMenu>
                    <ContextMenu x:Name="TaskbarContextMenu"
                                 DataContext="{Binding Path=PlacementTarget.Tag,
                                                       RelativeSource={RelativeSource Self}}"
                                 ItemsSource="{Binding Source={StaticResource MenuCollection}}">
                        <ContextMenu.Resources>
                            <Style TargetType="{x:Type MenuItem}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Tag}" Value="{x:Null}">
                                        <Setter Property="Header" Value="{Binding Header}" />
                                        <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                                        <Setter Property="IsCheckable" Value="{Binding IsCheckable}" />
                                        <Setter Property="IsChecked" Value="{Binding IsChecked, diag:PresentationTraceSources.TraceLevel=High}" />
                                        <Setter Property="CommandParameter" Value="{Binding}" />
                                        <Setter Property="Command" Value="{Binding DataContext.FlipCommand, Source={x:Reference mainWindow}}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                            <HierarchicalDataTemplate DataType="{x:Type vm:MenuItemViewModel}" ItemsSource="{Binding ChildMenuItems}" />
                        </ContextMenu.Resources>
                    </ContextMenu>
                </tb:TaskbarIcon.ContextMenu>
            </tb:TaskbarIcon>
        </Grid>
    </DockPanel>
</Window>
